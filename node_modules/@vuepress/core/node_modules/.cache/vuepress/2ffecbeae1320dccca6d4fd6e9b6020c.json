{"remainingRequest":"/home/nguyen.quang.phu/Documents/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/nguyen.quang.phu/Documents/vuepress-starter/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/nguyen.quang.phu/Documents/vuepress-starter/node_modules/vue-loader/lib/index.js??ref--1-1!/home/nguyen.quang.phu/Documents/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/nguyen.quang.phu/Documents/vuepress-starter/docs/README.md?vue&type=template&id=c6f5370e&","dependencies":[{"path":"/home/nguyen.quang.phu/Documents/vuepress-starter/docs/README.md","mtime":1602811111589},{"path":"/home/nguyen.quang.phu/Documents/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1602731093819},{"path":"/home/nguyen.quang.phu/Documents/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1602731093939},{"path":"/home/nguyen.quang.phu/Documents/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1602731093819},{"path":"/home/nguyen.quang.phu/Documents/vuepress-starter/node_modules/vue-loader/lib/index.js","mtime":1602731093939},{"path":"/home/nguyen.quang.phu/Documents/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js","mtime":1602731094021}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}